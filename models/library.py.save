from __future__ import annotations
import json
import os
import re
from typing import List, Optional
import httpx

from .abstract_library import AbstractLibrary
from .book import Book

OPENLIB_BASE = "https://openlibrary.org"

def _safe_get_json(url: str, timeout: float = 10.0) -> Optional[dict]:
    # HTTP GET, return JSON or None on error
    try:
        resp = httpx.get(url, timeout=timeout)
    except httpx.RequestError:
        return None
    if resp.status_code == 404:
        return None
    try:
        resp.raise_for_status()
    except httpx.HTTPStatusError:
        return None
    try:
        return resp.json()
    except ValueError:
        return None

def _join_authors(authors: List[str]) -> str:
    # Join multiple authors into one string
    return ", ".join(a for a in authors if a) if authors else ""

class Library(AbstractLibrary):
    def __init__(self, db_file: str = "library.json") -> None:
        self.db_file = db_file
        self._books: List[Book] = []
        self.load_books()

    def _norm_isbn(self, isbn: str) -> str:
        digits = re.findall(r"\d", isbn or "")
        tail_x = "X" if str(isbn).strip().upper().endswith("X") else ""
        return "".join(digits) + tail_x

    def load_books(self) -> None:
        if not os.path.exists(self.db_file):
            self._books = []
            return
        try:
            with open(self.db_file, "r", encoding="utf-8") as f:
                raw = json.load(f)
        except Exception:
            self._books = []
            return
        books: List[Book] = []
        for item in raw or []:
            try:
                if hasattr(Book, "from_dict"):
                    b = Book.from_dict(item)  # type: ignore
                else:
                    b = Book(
                        title=item.get("title", ""),
                        author=item.get("author", ""),
                        isbn=item.get("isbn", ""),
                    )
                b = Book(title=b.title, author=b.author, isbn=self._norm_isbn(b.isbn))
                books.append(b)
            except Exception:
                continue
        self._books = books

    def save_books(self) -> None:
        out = []
        for b in self._books:
            if hasattr(b, "to_dict"):
                out.append(b.to_dict())  # type: ignore
            else:
                out.append({"title": b.title, "author": b.author, "isbn": b.isbn})
        with open(self.db_file, "w", encodiutf-8") as f:
            json.dump(out, f, ensure_ascii=False, indent=2)

    def list_books(self) -> List[Book]:
        return list(self._books)

    def find_book(self, isbn: str) -> Optorm =   
